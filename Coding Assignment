-- PART ONE (5 stored procedures and descriptions)
-- #1
-- This procedure will count current employees by title.

DROP PROCEDURE IF EXISTS employees.countCurrentEmployeesByTitle;
DELIMITER //
//
CREATE PROCEDURE employees.countCurrentEmployeesByTitle()
BEGIN
	SELECT title AS Title, COUNT(*) AS "Number of Employees"
		FROM employees_with_titles
		WHERE to_date > NOW()
		GROUP BY title;
END //
DELIMITER ;
CALL countCurrentEmployeesByTitle();


-- #2
-- This procedure will return all the titles held by the given employee name.

DROP PROCEDURE IF EXISTS employees.getAllTitlesOfEmployee;
DELIMITER //
//
CREATE PROCEDURE employees.getAllTitlesOfEmployee(
	IN employeeFirstName VARCHAR(20),
	IN employeeLastName VARCHAR(20)
)
BEGIN
	SELECT title
	FROM employees_with_titles
	WHERE first_name = employeefirstname
		AND last_name = employeeLastName;
END //
DELIMITER ;
CALL getAllTitlesOfEmployee("Kyoichi", "Maliniak");

-- #3
-- This procedure will return all the current titles held by the given employee name.

DROP PROCEDURE IF EXISTS employees.getCurrentTitlesOfEmployee;
DELIMITER //
//
CREATE PROCEDURE employees.getCurrentTitlesOfEmployee(
	IN employeeFirstName VARCHAR(20),
	IN employeeLastName VARCHAR(20)
)
BEGIN
	SELECT title
	FROM employees_with_titles
	WHERE first_name = employeefirstname
		AND last_name = employeeLastName
		AND to_date > NOW();
END //
DELIMITER ;
CALL getCurrentTitlesOfEmployee("Kyoichi", "Maliniak");

-- #4
-- This procedure will return the current salary of the given employee name.

DROP PROCEDURE IF EXISTS employees.getEmployeeCurrentSalary;
DELIMITER //
//
CREATE PROCEDURE employees.getEmployeeCurrentSalary(
	IN employeeFirstName VARCHAR(20),
	IN employeeLastName VARCHAR(20)
)
BEGIN
	SELECT salary
	FROM employees_with_salary
	WHERE first_name = employeeFirstName 
		AND last_name = employeeLastName 
		AND to_date > NOW();
END //
DELIMITER ;
CALL getEmployeeCurrentSalary("Georgi", "Facello");


-- #5
-- This procedure will return all employees with a salary greater than the given
-- minimum salary.

DROP PROCEDURE IF EXISTS employees.getEmployeesWithSalaryGreaterThan;
DELIMITER //
//
CREATE PROCEDURE employees.getEmployeesWithSalaryGreaterThan(
	IN minimumSalary int(3)
)
BEGIN
	SELECT emp_no, first_name, last_name, salary
	FROM employees_with_salary
	WHERE salary > minimumSalary;
END //
DELIMITER ;
CALL getEmployeesWithSalaryGreaterThan(100000);


-- PART TWO 

DROP VIEW IF EXISTS employees.employees_with_titles;
CREATE VIEW employees_with_titles AS
	SELECT employees.emp_no, first_name, last_name, gender, hire_date, title, titles.from_date, titles.to_date
	FROM employees
	INNER JOIN titles
	ON employees.emp_no = titles.emp_no;
	
DROP VIEW IF EXISTS employees.employees_with_salary;
CREATE VIEW employees_with_salary AS
	SELECT employees.emp_no, employees.first_name, employees.last_name, salaries.salary, salaries.from_date, salaries.to_date
	FROM employees
	INNER JOIN salaries
	ON employees.emp_no = salaries.emp_no;
